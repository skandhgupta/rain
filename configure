#! /usr/bin/env python
"""usage: ./configure [OPTS]
Configuration Script

Each of the following features can be enabled by using the `-name' option and
disabled by using `-no-name'. Default values are indicated in brackets.

%s

Generic Options:
  -h, --help            display this message and exit
  -q, --quiet           be quiet
"""

# generic runner script
# make your project specific changes in configure.py

import sys
import getopt
from StringIO import StringIO

try: sys.dont_write_bytecode = True
except: pass
from configure import *

def create_logger (enabled, stream):
    def log_null (*args, **kw):
        pass
    def log_stream (msg, *args, **kwargs):
        stream.write (msg % args)
        if not kwargs.get ('continued', False):
            stream.write ('\n')
        stream.flush ()
    return log_stream if enabled else log_null

def kick_user (err):
    print ('configure: %s' % err)
    print ("Try `%s --help' for more information." % sys.argv[0])
    sys.exit (2)

def generate_help (features):
    out = StringIO ()
    for f in features:
        out.write ('  %s\t\t%s [%s]\n' % f)
    return out.getvalue ()

fval = {}
for f in features:
    fval[f[0]] = f[2]

try:
    opts, args = getopt.getopt (sys.argv[1:], 'qh',
            ['quiet', 'help'] \
                    + fval.keys () \
                    + ['no-'+f for f in fval.keys ()])
except getopt.GetoptError, err:
    kick_user (err)

if args:
    kick_user ('unexpected arguments (%s)' % repr (args))

quiet = False

for o, a in opts:
    if o in ('-h', '--help'):
        print (__doc__ % generate_help (features))
        sys.exit ()
    elif o in ('-q', '--quiet'):
        quiet = True
    else:
        if o.startswith ('--no-'):
            f = o[5:]
            e = False
        else:
            f = o[2:]
            e = True
        fval[f] = e

log = create_logger (not quiet, sys.stdout)
out = StringIO () 

for f, e in fval.items ():
    log ('Configuring %s... ', f, continued=True)
    try:
        e = globals ()[f.replace ('-', '_')] (e, out, log)
    except:
        sys.exit ()
    log ('enabled' if e else 'disabled')

log ('Writing configuration to Makefile... ', continued=True)
with open ('.Makefile.config', 'w') as f:
    f.write (out.getvalue ())
log ('done')

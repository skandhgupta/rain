#! /usr/bin/env python
"""usage: ./configure [OPTS]
Configuration Script

Each of the following features can be enabled by using the `-name' option and
disabled by using `-no-name'. The ones marked by a `+' are enabled by default.

+ povray                install povray

Generic Options:
  -h, --help            display this message and exit
  -q, --quiet           be quiet
"""

# XXX ordering?
features = {
    'povray': True
    }

import logging


def povray (enabled, out, log):
    out.write (repr ((enabled, out, log)))


# http://bytes.com/topic/python/answers/717264-logging-module-trailing-newlines
class NoNewlineStreamHandler (logging.StreamHandler):
    def emit (self, record):
        try:
            msg = self.format (record)
            fs = '%s' if hasattr (record, 'continued') else '%s\n'
            self.stream.write (fs % msg)
            self.stream.flush ()
        except (KeyboardInterrupt, SystemExit):
            raise
        except:
            self.handleError (record)

                
if __name__ == '__main__':
    import sys
    import getopt
    from StringIO import StringIO

    def kick_user (err):
        print ('configure: %s' % err)
        print ("Try `%s --help' for more information." % sys.argv[0])
        sys.exit (2)

    try:
        opts, args = getopt.getopt (sys.argv[1:], 'qh',
                ['quiet', 'help'] \
                        + features.keys () \
                        + ['-no-'+f for f in features.keys ()])
    except getopt.GetOptError, err:
        kick_user (err)

    if args:
        kick_user ('unexpected arguments (%s)' % repr (args))

    log = logging.getLogger ('configure')
    log.addHandler (NoNewlineStreamHandler ())
    log.setLevel (logging.DEBUG)

    for o, a in opts:
        if o in ('-h', '--help'):
            print (__doc__)
            sys.exit ()
        elif o in ('-q', '--quiet'):
            log.setLevel (logging.WARN)
        else:
            if o.beginswith ('--no-'):
                f = o[5:]
                e = False
            else:
                f = o[2:]
                e = True
            features[f] = e

    out = StringIO () 
    continued = dict (no_newline=True)
    for f, e in features.items ():
        log.info ('%s...', f, extra=continued)
        e = getattr (sys.modules[__name__], f) (e, out, log)
        log.info ('Enabled' if e else 'Disabled')

    log.info ('Writing configuration to Makefile...', extra=continued)
    with open ('.Makefile.config', 'w') as f:
        f.write (out.getvalue ())
    log.info ('Done')
